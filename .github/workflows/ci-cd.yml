name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  AWS_REGION: eu-north-1
  ECR_REPOSITORY: devops-cicd-demo

jobs:
  version-management:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
      build-metadata: ${{ steps.version.outputs.build-metadata }}
      git-commit: ${{ steps.version.outputs.git-commit }}
      git-branch: ${{ steps.version.outputs.git-branch }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Required for git tags
      
      - name: Setup version management
        run: |
          chmod +x scripts/version.sh
      
      - name: Get version information
        id: version
        run: |
          VERSION=$(./scripts/version.sh get)
          BUILD_METADATA=$(./scripts/version.sh generate-build-metadata)
          GIT_COMMIT=$(git rev-parse --short HEAD)
          GIT_BRANCH=$(git branch --show-current)
          
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "build-metadata=$BUILD_METADATA" >> $GITHUB_OUTPUT
          echo "git-commit=$GIT_COMMIT" >> $GITHUB_OUTPUT
          echo "git-branch=$GIT_BRANCH" >> $GITHUB_OUTPUT
          
          echo "üìã Version Information:"
          echo "  Version: $VERSION"
          echo "  Build Metadata: $BUILD_METADATA"
          echo "  Git Commit: $GIT_COMMIT"
          echo "  Git Branch: $GIT_BRANCH"
      
      - name: Validate version
        run: |
          ./scripts/version.sh validate
          echo "‚úÖ Version format is valid"

  test:
    runs-on: ubuntu-latest
    needs: version-management
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
      
      - name: Install dependencies
        run: |
          pip install -r requirements.txt
          pip install -r code-quality/requirements.txt
      
      - name: Run quality checks
        run: |
          bash code-quality/scripts/run-quality-checks.sh
      
      - name: Run tests
        run: |
          python -m pytest tests/ -v --cov=src --cov-report=xml --cov-report=html
      
      - name: Upload coverage reports
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false

  build-and-push:
    runs-on: ubuntu-latest
    needs: [version-management, test]
    if: github.ref == 'refs/heads/main'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
      
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2
      
      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Build Docker image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          VERSION: ${{ needs.version-management.outputs.version }}
          BUILD_METADATA: ${{ needs.version-management.outputs.build-metadata }}
          GIT_COMMIT: ${{ needs.version-management.outputs.git-commit }}
          GIT_BRANCH: ${{ needs.version-management.outputs.git-branch }}
          BUILD_DATE: ${{ github.event.head_commit.timestamp }}
        run: |
          echo "üî® Building Docker image..."
          echo "  Version: $VERSION"
          echo "  Build Metadata: $BUILD_METADATA"
          echo "  Git Commit: $GIT_COMMIT"
          echo "  Build Date: $BUILD_DATE"
          
          # Build Docker image with version information
          docker build -f docker/Dockerfile \
            --build-arg APP_VERSION=$VERSION \
            --build-arg BUILD_DATE=$BUILD_DATE \
            --build-arg VCS_REF=$GIT_COMMIT \
            --label "org.opencontainers.image.version=$VERSION" \
            --label "org.opencontainers.image.revision=$GIT_COMMIT" \
            --label "org.opencontainers.image.created=$BUILD_DATE" \
            --label "org.opencontainers.image.source=https://github.com/${{ github.repository }}" \
            --label "org.opencontainers.image.title=DevOps CI/CD Demo" \
            --label "org.opencontainers.image.description=DevOps CI/CD pipeline demonstration" \
            -t devops-cicd-demo:$VERSION .
          
          echo "‚úÖ Docker image built successfully"
          echo "  Image: devops-cicd-demo:$VERSION"
      
      - name: Simulate Docker Image Signing
        env:
          VERSION: ${{ needs.version-management.outputs.version }}
          GIT_COMMIT: ${{ needs.version-management.outputs.git-commit }}
        run: |
          echo "üîê STEP: Simulate Docker Image Signing"
          echo "   üîë Generating signing key..."
          echo "   üìù Creating signature..."
          echo "   üè∑Ô∏è Image: devops-cicd-demo:$VERSION"
          echo "   üîç Signature: sha256:$(echo "devops-cicd-demo:$VERSION" | sha256sum | cut -d' ' -f1)"
          echo "   üìã Certificate: CN=Demo Signing Authority, O=DevOps Demo, C=US"
          echo "   üìÖ Valid Until: $(date -d '+1 year' -u +'%Y-%m-%dT%H:%M:%SZ')"
          echo "   ‚úÖ Image signed successfully"
          
          # Generate simulated signing metadata
          SIGNATURE=$(echo "devops-cicd-demo:$VERSION" | sha256sum | cut -d' ' -f1)
          CERTIFICATE="CN=Demo Signing Authority, O=DevOps Demo, C=US"
          VALID_UNTIL=$(date -d '+1 year' -u +'%Y-%m-%dT%H:%M:%SZ')
          
          echo "üìã Signing Metadata:"
          echo "  Image: devops-cicd-demo:$VERSION"
          echo "  Signature: $SIGNATURE"
          echo "  Certificate: $CERTIFICATE"
          echo "  Valid Until: $VALID_UNTIL"
          echo "  Git Commit: $GIT_COMMIT"
      
      - name: Tag and Push to ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          VERSION: ${{ needs.version-management.outputs.version }}
          GIT_COMMIT: ${{ needs.version-management.outputs.git-commit }}
          GIT_BRANCH: ${{ needs.version-management.outputs.git-branch }}
        run: |
          echo "üì§ Pushing to ECR Repository..."
          echo "  Registry: $ECR_REGISTRY"
          echo "  Repository: $ECR_REPOSITORY"
          
          # Tag for ECR with multiple tags
          docker tag devops-cicd-demo:$VERSION $ECR_REGISTRY/$ECR_REPOSITORY:$VERSION
          docker tag devops-cicd-demo:$VERSION $ECR_REGISTRY/$ECR_REPOSITORY:latest
          docker tag devops-cicd-demo:$VERSION $ECR_REGISTRY/$ECR_REPOSITORY:$GIT_BRANCH
          docker tag devops-cicd-demo:$VERSION $ECR_REGISTRY/$ECR_REPOSITORY:$GIT_COMMIT
          
          echo "üè∑Ô∏è Tagged images:"
          echo "  $ECR_REGISTRY/$ECR_REPOSITORY:$VERSION"
          echo "  $ECR_REGISTRY/$ECR_REPOSITORY:latest"
          echo "  $ECR_REGISTRY/$ECR_REPOSITORY:$GIT_BRANCH"
          echo "  $ECR_REGISTRY/$ECR_REPOSITORY:$GIT_COMMIT"
          
          # Push all tags
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$VERSION
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$GIT_BRANCH
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$GIT_COMMIT
          
          echo "‚úÖ All images pushed successfully to ECR"
      
      - name: Verify ECR Push
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          VERSION: ${{ needs.version-management.outputs.version }}
        run: |
          echo "üîç Verifying ECR push..."
          
          # List images in ECR repository
          aws ecr describe-images \
            --repository-name $ECR_REPOSITORY \
            --region $AWS_REGION \
            --query 'imageDetails[?contains(imageTags, `'$VERSION'`)].{Tag: imageTags, PushedAt: imagePushedAt, Size: imageSizeInBytes}' \
            --output table
          
          echo "‚úÖ ECR push verification completed"

  deploy:
    runs-on: ubuntu-latest
    needs: [version-management, build-and-push]
    if: github.ref == 'refs/heads/main'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
      
      - name: Deploy to ECS
        env:
          VERSION: ${{ needs.version-management.outputs.version }}
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        run: |
          echo "üöÄ Deploying version $VERSION to ECS..."
          echo "  Cluster: production-devops-cicd-demo-cluster"
          echo "  Service: production-devops-cicd-demo-service"
          echo "  Image: $ECR_REGISTRY/$ECR_REPOSITORY:$VERSION"
          
          # Update ECS service with new image
          aws ecs update-service \
            --cluster production-devops-cicd-demo-cluster \
            --service production-devops-cicd-demo-service \
            --force-new-deployment
          
          echo "‚úÖ Deployment initiated successfully"
          
          # Wait for deployment to complete
          echo "‚è≥ Waiting for deployment to complete..."
          aws ecs wait services-stable \
            --cluster production-devops-cicd-demo-cluster \
            --services production-devops-cicd-demo-service
          
          echo "‚úÖ Deployment completed successfully"
          
          # Verify deployment
          echo "üîç Verifying deployment..."
          aws ecs describe-services \
            --cluster production-devops-cicd-demo-cluster \
            --services production-devops-cicd-demo-service \
            --query 'services[0].{Status: status, RunningCount: runningCount, DesiredCount: desiredCount, UpdatedAt: updatedAt}' \
            --output table

  notify-deployment:
    runs-on: ubuntu-latest
    needs: [version-management, deploy]
    if: github.ref == 'refs/heads/main'
    
    steps:
      - name: Deployment Summary
        env:
          VERSION: ${{ needs.version-management.outputs.version }}
          GIT_COMMIT: ${{ needs.version-management.outputs.git-commit }}
          BUILD_METADATA: ${{ needs.version-management.outputs.build-metadata }}
        run: |
          echo "üéâ Deployment Summary"
          echo "===================="
          echo "Version: $VERSION"
          echo "Build Metadata: $BUILD_METADATA"
          echo "Git Commit: $GIT_COMMIT"
          echo "Environment: Production"
          echo "Status: ‚úÖ Successfully deployed"
          echo ""
          echo "üìä Deployment Details:"
          echo "  - Docker Image: devops-cicd-demo:$VERSION"
          echo "  - ECR Repository: $ECR_REPOSITORY"
          echo "  - ECS Cluster: production-devops-cicd-demo-cluster"
          echo "  - ECS Service: production-devops-cicd-demo-service"
          echo ""
          echo "üåê Application URLs:"
          echo "  Main: http://production-devops-cicd-demo-alb-685489736.eu-north-1.elb.amazonaws.com/"
          echo "  Health: http://production-devops-cicd-demo-alb-685489736.eu-north-1.elb.amazonaws.com/health"
          echo "  Info: http://production-devops-cicd-demo-alb-685489736.eu-north-1.elb.amazonaws.com/info"
          echo ""
          echo "üîê Security Features:"
          echo "  - Docker image signed (simulated)"
          echo "  - Version-based tagging"
          echo "  - Git commit tracking"
          echo "  - Build metadata included" 