name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  AWS_REGION: us-west-2
  ECR_REPOSITORY: devops-cicd-demo

jobs:
  version-management:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
      build-metadata: ${{ steps.version.outputs.build-metadata }}
      git-commit: ${{ steps.version.outputs.git-commit }}
      git-branch: ${{ steps.version.outputs.git-branch }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Required for git tags
      
      - name: Setup version management
        run: |
          chmod +x scripts/version.sh
      
      - name: Get version information
        id: version
        run: |
          VERSION=$(./scripts/version.sh get)
          BUILD_METADATA=$(./scripts/version.sh generate-build-metadata)
          GIT_COMMIT=$(git rev-parse --short HEAD)
          GIT_BRANCH=$(git branch --show-current)
          
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "build-metadata=$BUILD_METADATA" >> $GITHUB_OUTPUT
          echo "git-commit=$GIT_COMMIT" >> $GITHUB_OUTPUT
          echo "git-branch=$GIT_BRANCH" >> $GITHUB_OUTPUT
          
          echo "üìã Version Information:"
          echo "  Version: $VERSION"
          echo "  Build Metadata: $BUILD_METADATA"
          echo "  Git Commit: $GIT_COMMIT"
          echo "  Git Branch: $GIT_BRANCH"
      
      - name: Validate version
        run: |
          ./scripts/version.sh validate
          echo "‚úÖ Version format is valid"

  test:
    runs-on: ubuntu-latest
    needs: version-management
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
      
      - name: Install dependencies
        run: |
          pip install -r requirements.txt
          pip install -r code-quality/requirements.txt
      
      - name: Run quality checks
        run: |
          bash code-quality/scripts/run-quality-checks.sh
      
      - name: Run tests
        run: |
          python -m pytest tests/ -v --cov=src --cov-report=xml --cov-report=html
      
      - name: Upload coverage reports
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false

  build-and-push:
    runs-on: ubuntu-latest
    needs: [version-management, test]
    if: github.ref == 'refs/heads/main'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
      
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2
      
      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Build and push Docker image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          VERSION: ${{ needs.version-management.outputs.version }}
          BUILD_METADATA: ${{ needs.version-management.outputs.build-metadata }}
          GIT_COMMIT: ${{ needs.version-management.outputs.git-commit }}
          GIT_BRANCH: ${{ needs.version-management.outputs.git-branch }}
          BUILD_DATE: ${{ github.event.head_commit.timestamp }}
        run: |
          echo "üî® Building Docker image..."
          echo "  Version: $VERSION"
          echo "  Build Metadata: $BUILD_METADATA"
          echo "  Git Commit: $GIT_COMMIT"
          echo "  Build Date: $BUILD_DATE"
          
          # Build Docker image with version information
          docker build -f docker/Dockerfile \
            --build-arg APP_VERSION=$VERSION \
            --build-arg BUILD_DATE=$BUILD_DATE \
            --build-arg VCS_REF=$GIT_COMMIT \
            --label "org.opencontainers.image.version=$VERSION" \
            --label "org.opencontainers.image.revision=$GIT_COMMIT" \
            --label "org.opencontainers.image.created=$BUILD_DATE" \
            -t devops-cicd-demo:$VERSION .
          
          # Tag for ECR
          docker tag devops-cicd-demo:$VERSION $ECR_REGISTRY/$ECR_REPOSITORY:$VERSION
          docker tag devops-cicd-demo:$VERSION $ECR_REGISTRY/$ECR_REPOSITORY:latest
          docker tag devops-cicd-demo:$VERSION $ECR_REGISTRY/$ECR_REPOSITORY:$GIT_BRANCH
          
          echo "üì§ Pushing to ECR..."
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$VERSION
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$GIT_BRANCH
          
          echo "‚úÖ Docker image built and pushed successfully"
          echo "  Image: $ECR_REGISTRY/$ECR_REPOSITORY:$VERSION"
          echo "  Latest: $ECR_REGISTRY/$ECR_REPOSITORY:latest"
          echo "  Branch: $ECR_REGISTRY/$ECR_REPOSITORY:$GIT_BRANCH"

  deploy:
    runs-on: ubuntu-latest
    needs: [version-management, build-and-push]
    if: github.ref == 'refs/heads/main'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
      
      - name: Setup Terraform
        run: |
          wget -O- -nv https://apt.releases.hashicorp.com/gpg | gpg --dearmor -o /usr/share/keyrings/hashicorp-archive-keyring.gpg
          echo "deb [signed-by=/usr/share/keyrings/hashicorp-archive-keyring.gpg] https://apt.releases.hashicorp.com $(lsb_release -cs) main" | tee /etc/apt/sources.list.d/hashicorp.list
          apt update && apt install terraform
      
      - name: Deploy to ECS
        env:
          VERSION: ${{ needs.version-management.outputs.version }}
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        run: |
          echo "üöÄ Deploying version $VERSION to ECS..."
          
          # Update ECS service with new image
          aws ecs update-service \
            --cluster devops-cicd-cluster \
            --service devops-cicd-service \
            --force-new-deployment
          
          echo "‚úÖ Deployment initiated successfully"
          
          # Wait for deployment to complete
          echo "‚è≥ Waiting for deployment to complete..."
          aws ecs wait services-stable \
            --cluster devops-cicd-cluster \
            --services devops-cicd-service
          
          echo "‚úÖ Deployment completed successfully"

  create-tag:
    runs-on: ubuntu-latest
    needs: [version-management, deploy]
    if: github.ref == 'refs/heads/main'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Configure Git
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
      
      - name: Create git tag
        env:
          VERSION: ${{ needs.version-management.outputs.version }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "üè∑Ô∏è Creating git tag for version $VERSION..."
          
          # Create and push git tag
          git tag -a "v$VERSION" -m "Release version $VERSION"
          git push origin "v$VERSION"
          
          echo "‚úÖ Git tag v$VERSION created successfully"
      
      - name: Create GitHub Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ needs.version-management.outputs.version }}
          release_name: Release v${{ needs.version-management.outputs.version }}
          body: |
            ## Release v${{ needs.version-management.outputs.version }}
            
            ### Changes
            - Automated release via CI/CD pipeline
            - Docker image: ${{ env.ECR_REPOSITORY }}:${{ needs.version-management.outputs.version }}
            - Git commit: ${{ needs.version-management.outputs.git-commit }}
            - Build date: ${{ needs.version-management.outputs.build-metadata }}
            
            ### Docker Image
            ```bash
            docker pull ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:${{ needs.version-management.outputs.version }}
            ```
            
            ### Health Check
            ```bash
            curl https://your-app.com/health
            ```
          draft: false
          prerelease: false 