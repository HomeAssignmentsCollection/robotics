name: Code Quality Checks

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  quality-checks:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -r code-quality/requirements.txt

      - name: Create reports directory
        run: |
          mkdir -p code-quality/reports/{coverage,security,metrics}

      - name: Run Code Quality Checks
        run: |
          bash code-quality/scripts/run-quality-checks.sh

      - name: Run CI Quality Gates
        run: |
          bash code-quality/scripts/ci-quality-gates.sh

      - name: Calculate Quality Index
        run: |
          python code-quality/scripts/calculate-quality-index.py

      - name: Upload Quality Reports
        uses: actions/upload-artifact@v3
        with:
          name: quality-reports
          path: |
            code-quality/reports/
            code-quality/reports/coverage/
            code-quality/reports/security/
            code-quality/reports/metrics/

      - name: Comment PR with Quality Report
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            
            try {
              const qualityReport = JSON.parse(fs.readFileSync('code-quality/reports/metrics/quality-index.json', 'utf8'));
              
              const comment = `## ðŸ“Š Code Quality Report
              
              **Overall Score:** ${qualityReport.overall_score}/100
              **Grade:** ${qualityReport.grade}
              **Status:** ${qualityReport.status}
              
              ### ðŸ“ˆ Metrics:
              ${Object.entries(qualityReport.metrics).map(([key, value]) => 
                `- **${key.replace('_', ' ').toUpperCase()}:** ${value.score}/100`
              ).join('\n')}
              
              ### ðŸ’¡ Recommendations:
              ${qualityReport.recommendations.map(rec => `- ${rec}`).join('\n')}
              
              ---
              *Generated on ${new Date().toISOString()}*`;
              
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: comment
              });
            } catch (error) {
              console.log('Could not generate quality report comment:', error.message);
            } 